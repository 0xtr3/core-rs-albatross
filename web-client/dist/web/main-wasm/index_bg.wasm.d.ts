/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_policy_free(a: number): void;
export function policy_transaction_validity_window(): number;
export function policy_transaction_validity_window_blocks(): number;
export function policy_batches_per_epoch(): number;
export function policy_blocks_per_batch(): number;
export function policy_blocks_per_epoch(): number;
export function policy_genesis_block_number(): number;
export function policy_tendermint_timeout_init(): number;
export function policy_tendermint_timeout_delta(): number;
export function policy_state_chunks_max_size(): number;
export function policy_epochAt(a: number): number;
export function policy_epochIndexAt(a: number): number;
export function policy_batchAt(a: number): number;
export function policy_batchIndexAt(a: number): number;
export function policy_electionBlockAfter(a: number): number;
export function policy_electionBlockBefore(a: number): number;
export function policy_lastElectionBlock(a: number): number;
export function policy_isElectionBlockAt(a: number): number;
export function policy_macroBlockAfter(a: number): number;
export function policy_macroBlockBefore(a: number): number;
export function policy_lastMacroBlock(a: number): number;
export function policy_isMacroBlockAt(a: number): number;
export function policy_isMicroBlockAt(a: number): number;
export function policy_firstBlockOf(a: number, b: number): void;
export function policy_firstBlockOfBatch(a: number, b: number): void;
export function policy_electionBlockOf(a: number, b: number): void;
export function policy_macroBlockOf(a: number, b: number): void;
export function policy_firstBatchOfEpoch(a: number): number;
export function policy_lastBlockOfReportingWindow(a: number): number;
export function policy_blockAfterReportingWindow(a: number): number;
export function policy_blockAfterJail(a: number): number;
export function policy_supplyAt(a: number, b: number, c: number): number;
export function policy_batchDelayPenalty(a: number): number;
export function policy_wasm_staking_contract_address(a: number): void;
export function policy_wasm_coinbase_address(a: number): void;
export function policy_wasm_max_size_micro_body(): number;
export function policy_wasm_slots(): number;
export function policy_wasm_two_f_plus_one(): number;
export function policy_wasm_f_plus_one(): number;
export function policy_wasm_block_producer_timeout(): number;
export function policy_wasm_block_separation_time(): number;
export function policy_wasm_min_epochs_stored(): number;
export function policy_wasm_timestamp_max_drift(): number;
export function policy_wasm_blocks_delay_decay(): number;
export function policy_wasm_minimum_rewards_percentage(): number;
export function policy_wasm_validator_deposit(): number;
export function policy_wasm_jail_epochs(): number;
export function policy_wasm_total_supply(): number;
export function policy_wasm_initial_supply_velocity(): number;
export function policy_wasm_supply_decay(): number;
export function policy_wasm_bls_cache_max_capacity(): number;
export function policy_wasm_history_chunks_max_size(): number;
export function policy_wasm_version(): number;
export function transaction___getClassname(a: number, b: number): void;
export function __wbg_transaction_free(a: number): void;
export function transaction_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): void;
export function transaction_sign(a: number, b: number, c: number): void;
export function transaction_hash(a: number, b: number): void;
export function transaction_verify(a: number, b: number, c: number): void;
export function transaction_isValidAt(a: number, b: number): number;
export function transaction_getContractCreationAddress(a: number): number;
export function transaction_serializeContent(a: number, b: number): void;
export function transaction_serialize(a: number, b: number): void;
export function transaction_format(a: number): number;
export function transaction_sender(a: number): number;
export function transaction_senderType(a: number): number;
export function transaction_recipient(a: number): number;
export function transaction_recipientType(a: number): number;
export function transaction_value(a: number): number;
export function transaction_fee(a: number): number;
export function transaction_feePerByte(a: number): number;
export function transaction_validityStartHeight(a: number): number;
export function transaction_networkId(a: number): number;
export function transaction_flags(a: number): number;
export function transaction_data(a: number, b: number): void;
export function transaction_set_data(a: number, b: number, c: number): void;
export function transaction_senderData(a: number, b: number): void;
export function transaction_proof(a: number, b: number): void;
export function transaction_set_proof(a: number, b: number, c: number): void;
export function transaction_serializedSize(a: number): number;
export function transaction_toHex(a: number, b: number): void;
export function transaction_toPlain(a: number, b: number): void;
export function transaction_fromAny(a: number, b: number): void;
export function transaction_fromPlain(a: number, b: number): void;
export function __wbg_merkletree_free(a: number): void;
export function merkletree_computeRoot(a: number, b: number, c: number): void;
export function __wbg_signatureproof_free(a: number): void;
export function signatureproof_singleSig(a: number, b: number): number;
export function signatureproof_webauthnSingleSig(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function signatureproof_verify(a: number, b: number, c: number): number;
export function signatureproof_isSignedBy(a: number, b: number): number;
export function signatureproof_signature(a: number): number;
export function signatureproof_publicKey(a: number): number;
export function signatureproof_merklePath(a: number): number;
export function signatureproof_set_merklePath(a: number, b: number): void;
export function signatureproof_serialize(a: number, b: number): void;
export function __wbg_blspublickey_free(a: number): void;
export function blspublickey_derive(a: number): number;
export function blspublickey_unserialize(a: number, b: number, c: number): void;
export function blspublickey_new(a: number, b: number, c: number): void;
export function blspublickey_serialize(a: number, b: number): void;
export function blspublickey_fromHex(a: number, b: number, c: number): void;
export function blspublickey_toHex(a: number, b: number): void;
export function address___getClassname(a: number, b: number): void;
export function __wbg_address_free(a: number): void;
export function address_new(a: number, b: number, c: number): void;
export function address_fromAny(a: number, b: number): void;
export function address_fromString(a: number, b: number, c: number): void;
export function address_fromUserFriendlyAddress(a: number, b: number, c: number): void;
export function address_toPlain(a: number, b: number): void;
export function address_toHex(a: number, b: number): void;
export function address_serialize(a: number, b: number): void;
export function es256publickey___getClassname(a: number, b: number): void;
export function es256publickey_verify(a: number, b: number, c: number, d: number): number;
export function es256publickey_unserialize(a: number, b: number, c: number): void;
export function es256publickey_fromSpki(a: number, b: number, c: number): void;
export function es256publickey_fromRaw(a: number, b: number, c: number): void;
export function es256publickey_new(a: number, b: number, c: number): void;
export function es256publickey_serialize(a: number, b: number): void;
export function es256publickey_fromHex(a: number, b: number, c: number): void;
export function es256publickey_toHex(a: number, b: number): void;
export function es256publickey_toAddress(a: number): number;
export function privatekey_generate(): number;
export function privatekey_unserialize(a: number, b: number, c: number): void;
export function privatekey_new(a: number, b: number, c: number): void;
export function privatekey_serialize(a: number, b: number): void;
export function privatekey_fromHex(a: number, b: number, c: number): void;
export function privatekey_toHex(a: number, b: number): void;
export function signature___getClassname(a: number, b: number): void;
export function signature_fromBytes(a: number, b: number, c: number): void;
export function signature_toBytes(a: number, b: number): void;
export function signature_fromAsn1(a: number, b: number, c: number): void;
export function signature_fromHex(a: number, b: number, c: number): void;
export function signature_toHex(a: number, b: number): void;
export function __wbg_es256publickey_free(a: number): void;
export function __wbg_privatekey_free(a: number): void;
export function __wbg_signature_free(a: number): void;
export function address_toUserFriendlyAddress(a: number, b: number): void;
export function __wbg_blssecretkey_free(a: number): void;
export function blssecretkey_generate(): number;
export function blssecretkey_unserialize(a: number, b: number, c: number): void;
export function blssecretkey_new(a: number, b: number, c: number): void;
export function blssecretkey_serialize(a: number, b: number): void;
export function blssecretkey_fromHex(a: number, b: number, c: number): void;
export function blssecretkey_toHex(a: number, b: number): void;
export function publickey___getClassname(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_derive(a: number): number;
export function publickey_verify(a: number, b: number, c: number, d: number): number;
export function publickey_unserialize(a: number, b: number, c: number): void;
export function publickey_fromSpki(a: number, b: number, c: number): void;
export function publickey_fromRaw(a: number, b: number, c: number): void;
export function publickey_new(a: number, b: number, c: number): void;
export function publickey_serialize(a: number, b: number): void;
export function publickey_fromHex(a: number, b: number, c: number): void;
export function publickey_toHex(a: number, b: number): void;
export function publickey_toAddress(a: number): number;
export function __wbg_clientconfiguration_free(a: number): void;
export function clientconfiguration_new(): number;
export function clientconfiguration_network(a: number, b: number, c: number, d: number): void;
export function clientconfiguration_seedNodes(a: number, b: number, c: number): void;
export function clientconfiguration_logLevel(a: number, b: number, c: number): void;
export function clientconfiguration_build(a: number): number;
export function __wbg_blskeypair_free(a: number): void;
export function blskeypair_generate(): number;
export function blskeypair_derive(a: number): number;
export function blskeypair_unserialize(a: number, b: number, c: number): void;
export function blskeypair_new(a: number, b: number): number;
export function blskeypair_serialize(a: number, b: number): void;
export function blskeypair_secretKey(a: number): number;
export function blskeypair_publicKey(a: number): number;
export function blskeypair_toHex(a: number, b: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_generate(): number;
export function keypair_derive(a: number): number;
export function keypair_fromHex(a: number, b: number, c: number): void;
export function keypair_unserialize(a: number, b: number, c: number): void;
export function keypair_new(a: number, b: number): number;
export function keypair_serialize(a: number, b: number): void;
export function keypair_sign(a: number, b: number, c: number): number;
export function keypair_signTransaction(a: number, b: number, c: number): void;
export function keypair_privateKey(a: number): number;
export function keypair_publicKey(a: number): number;
export function keypair_toAddress(a: number): number;
export function keypair_toHex(a: number, b: number): void;
export function __wbg_merklepath_free(a: number): void;
export function merklepath_compute(a: number, b: number, c: number): number;
export function merklepath_computeRoot(a: number, b: number, c: number): void;
export function merklepath_length(a: number): number;
export function __wbg_hash_free(a: number): void;
export function hash_computeBlake2b(a: number, b: number, c: number): void;
export function hash_computeArgon2d(a: number, b: number, c: number): void;
export function hash_computeSha256(a: number, b: number, c: number): void;
export function hash_computeSha512(a: number, b: number, c: number): void;
export function es256signature___getClassname(a: number, b: number): void;
export function __wbg_es256signature_free(a: number): void;
export function es256signature_fromBytes(a: number, b: number, c: number): void;
export function es256signature_toBytes(a: number, b: number): void;
export function es256signature_fromAsn1(a: number, b: number, c: number): void;
export function es256signature_fromHex(a: number, b: number, c: number): void;
export function es256signature_toHex(a: number, b: number): void;
export function __wbg_transactionbuilder_free(a: number): void;
export function transactionbuilder_newBasic(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function transactionbuilder_newBasicWithData(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function transactionbuilder_newCreateStaker(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function transactionbuilder_newStake(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function transactionbuilder_newUpdateStaker(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function transactionbuilder_newUnstake(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function transactionbuilder_newSetInactiveStake(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function transactionbuilder_newCreateValidator(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function transactionbuilder_newUpdateValidator(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function transactionbuilder_newDeactivateValidator(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function transactionbuilder_newDeleteValidator(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function transactionbuilder_newRetireValidator(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
