/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_policy_free(a: number): void;
export function policy_transaction_validity_window(): number;
export function policy_transaction_validity_window_blocks(): number;
export function policy_batches_per_epoch(): number;
export function policy_blocks_per_batch(): number;
export function policy_blocks_per_epoch(): number;
export function policy_genesis_block_number(): number;
export function policy_tendermint_timeout_init(): number;
export function policy_tendermint_timeout_delta(): number;
export function policy_state_chunks_max_size(): number;
export function policy_epochAt(a: number): number;
export function policy_epochIndexAt(a: number): number;
export function policy_batchAt(a: number): number;
export function policy_batchIndexAt(a: number): number;
export function policy_electionBlockAfter(a: number): number;
export function policy_electionBlockBefore(a: number): number;
export function policy_lastElectionBlock(a: number): number;
export function policy_isElectionBlockAt(a: number): number;
export function policy_macroBlockAfter(a: number): number;
export function policy_macroBlockBefore(a: number): number;
export function policy_lastMacroBlock(a: number): number;
export function policy_isMacroBlockAt(a: number): number;
export function policy_isMicroBlockAt(a: number): number;
export function policy_firstBlockOf(a: number, b: number): void;
export function policy_firstBlockOfBatch(a: number, b: number): void;
export function policy_electionBlockOf(a: number, b: number): void;
export function policy_macroBlockOf(a: number, b: number): void;
export function policy_firstBatchOfEpoch(a: number): number;
export function policy_lastBlockOfReportingWindow(a: number): number;
export function policy_blockAfterReportingWindow(a: number): number;
export function policy_blockAfterJail(a: number): number;
export function policy_supplyAt(a: number, b: number, c: number): number;
export function policy_batchDelayPenalty(a: number): number;
export function policy_wasm_staking_contract_address(a: number): void;
export function policy_wasm_coinbase_address(a: number): void;
export function policy_wasm_max_size_micro_body(): number;
export function policy_wasm_slots(): number;
export function policy_wasm_two_f_plus_one(): number;
export function policy_wasm_f_plus_one(): number;
export function policy_wasm_block_producer_timeout(): number;
export function policy_wasm_block_separation_time(): number;
export function policy_wasm_min_epochs_stored(): number;
export function policy_wasm_timestamp_max_drift(): number;
export function policy_wasm_blocks_delay_decay(): number;
export function policy_wasm_minimum_rewards_percentage(): number;
export function policy_wasm_validator_deposit(): number;
export function policy_wasm_jail_epochs(): number;
export function policy_wasm_total_supply(): number;
export function policy_wasm_initial_supply_velocity(): number;
export function policy_wasm_supply_decay(): number;
export function policy_wasm_bls_cache_max_capacity(): number;
export function policy_wasm_history_chunks_max_size(): number;
export function policy_wasm_version(): number;
export function __wbg_address_free(a: number): void;
export function address_new(a: number, b: number, c: number): void;
export function address_fromAny(a: number, b: number): void;
export function address_fromString(a: number, b: number, c: number): void;
export function address_toPlain(a: number, b: number): void;
export function __wbg_clientconfiguration_free(a: number): void;
export function __wbg_client_free(a: number): void;
export function client_create(a: number): number;
export function client_addConsensusChangedListener(a: number, b: number): number;
export function client_addHeadChangedListener(a: number, b: number): number;
export function client_addPeerChangedListener(a: number, b: number): number;
export function client_addTransactionListener(a: number, b: number, c: number): number;
export function client_removeListener(a: number, b: number): number;
export function client_getNetworkId(a: number): number;
export function client_isConsensusEstablished(a: number): number;
export function client_waitForConsensusEstablished(a: number): number;
export function client_getHeadHash(a: number): number;
export function client_getHeadHeight(a: number): number;
export function client_getHeadBlock(a: number): number;
export function client_getBlock(a: number, b: number, c: number): number;
export function client_getBlockAt(a: number, b: number): number;
export function client_getAccount(a: number, b: number): number;
export function client_getAccounts(a: number, b: number): number;
export function client_getStaker(a: number, b: number): number;
export function client_getStakers(a: number, b: number): number;
export function client_getValidator(a: number, b: number): number;
export function client_getValidators(a: number, b: number): number;
export function client_sendTransaction(a: number, b: number): number;
export function client_getTransaction(a: number, b: number, c: number): number;
export function client_getTransactionReceiptsByAddress(a: number, b: number, c: number, d: number, e: number): number;
export function client_getTransactionsByAddress(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function __wbg_transaction_free(a: number): void;
export function transaction_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): void;
export function transaction_hash(a: number, b: number): void;
export function transaction_verify(a: number, b: number, c: number): void;
export function transaction_isValidAt(a: number, b: number): number;
export function transaction_getContractCreationAddress(a: number): number;
export function transaction_serializeContent(a: number, b: number): void;
export function transaction_serialize(a: number, b: number): void;
export function transaction_format(a: number): number;
export function transaction_sender(a: number): number;
export function transaction_senderType(a: number): number;
export function transaction_recipient(a: number): number;
export function transaction_recipientType(a: number): number;
export function transaction_value(a: number): number;
export function transaction_fee(a: number): number;
export function transaction_feePerByte(a: number): number;
export function transaction_validityStartHeight(a: number): number;
export function transaction_networkId(a: number): number;
export function transaction_flags(a: number): number;
export function transaction_data(a: number, b: number): void;
export function transaction_set_data(a: number, b: number, c: number): void;
export function transaction_senderData(a: number, b: number): void;
export function transaction_proof(a: number, b: number): void;
export function transaction_set_proof(a: number, b: number, c: number): void;
export function transaction_serializedSize(a: number): number;
export function transaction_toHex(a: number, b: number): void;
export function transaction_toPlain(a: number, b: number): void;
export function transaction_fromAny(a: number, b: number): void;
export function transaction_fromPlain(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke0_mut__hef811265daa3a595(a: number, b: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__h44c50f1b99f904ff(a: number, b: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__h21b0590f73469ed7(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h5ecdb55d58a32349(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__he76e9651c19926b4(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__h6ead74bc406c3080(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h2ff626fa09ccddc4(a: number, b: number, c: number, d: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
